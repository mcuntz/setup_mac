# --------------------------------------------------------------------
# Non-interactive
#

# set paths at Eve@UFZ and Gadi/Raijin@NCI-Australia even when non-interactive
[[ -f /etc/bashrc ]] && source /etc/bashrc
# set paths at MPI Hamburg even when non-interactive
[[ -e /client/etc/profile.zmaw ]] && source /client/etc/profile.zmaw

# set homebrew also in non-interactive scripts
if [[ -d /opt/homebrew ]] ; then
    # eval $(/opt/homebrew/bin/brew shellenv)
    # or by hand to append rather than prepand path
    export HOMEBREW_PREFIX="/opt/homebrew";
    export HOMEBREW_CELLAR="/opt/homebrew/Cellar";
    export HOMEBREW_REPOSITORY="/opt/homebrew";
    export PATH=${PATH}:/opt/homebrew/bin
else
    export HOMEBREW_PREFIX="/usr/local";
    export HOMEBREW_CELLAR="/usr/local/Cellar";
    export HOMEBREW_REPOSITORY="/usr/local";
    export PATH=${PATH}:/usr/local/bin
fi

# use pyenv also in non-interactive scripts
if [[ -d ${HOME}/.pyenv ]] ; then
    export PYENV_ROOT="${HOME}/.pyenv"
    export PATH=${PYENV_ROOT}/shims:${PATH}
    if command -v pyenv 1>/dev/null 2>&1 ; then eval "$(pyenv init -)" ; fi
    if which pyenv-virtualenv-init > /dev/null ; then eval "$(pyenv virtualenv-init -)" ; fi
fi

# If not running interactively, don't do anything more
[[ -z "$PS1" ]] && return

# --------------------------------------------------------------------
# Interactive session - general settings
#

#
# Pathes
#

# after pathmunge of H Schwartz: https://github.com/hrs/dotfiles/
prepath() {
    # return prepended arbitrary PATH variable
    #   export MANPATH=$(${MANPATH} /path/to/add)
    if [[ $# -gt 1 ]] ; then
        if ! echo ${1} | grep -E -q "(^|:)${2}($|:)" ; then
            # /path/to/add not yet in PATH; /path/to/add must exist
            [[ -d ${2} ]] && echo ${2}:${1} || echo ${1}
        else
            # /path/to/add already in PATH
            echo ${1}
        fi
    else
        # PATH does not exist yet; /path/to/add must exist
        [[ -d ${1} ]] && echo ${1} || echo ""
    fi
}
apppath() {
    # return appended arbitrary PATH variable
    #   export MANPATH=$(${MANPATH} /path/to/add)
    if [[ $# -gt 1 ]] ; then
        if ! echo ${1} | grep -E -q "(^|:)${2}($|:)" ; then
            # /path/to/add not yet in PATH; /path/to/add must exist
            [[ -d ${2} ]] && echo ${1}:${2} || echo ${1}
        else
            # /path/to/add already in PATH
            echo ${1}
        fi
    else
        # PATH does not exist yet; /path/to/add must exist
        [[ -d ${1} ]] && echo ${1} || echo ""
    fi
}

# PATH
# anaconda might install netcdf, which is hence in ~/.pyenv/shims
# but anaconda might not be the active python version and ncdump,
# for example, might not work -> use version of homebrew
export PATH=$(prepath ${PATH} /usr/local/opt/netcdf/bin)
export PATH=$(prepath ${PATH} /opt/homebrew/opt/netcdf/bin)
export PATH=$(prepath ${PATH} ${HOME}/prog/jams/utils)
export PATH=$(prepath ${PATH} ${HOME}/prog/github/ido)
export PATH=$(prepath ${PATH} ${HOME}/prog/github/jams_python/bin)
if [[ -d ${HOME}/../shared/local ]] ; then
    # explor
    export PATH=$(prepath ${PATH} ${HOME}/../shared/local/bin)
    export LD_LIBRARY_PATH=$(apppath ${LD_LIBRARY_PATH} ${HOME}/../shared/local/lib)
    export MANPATH=$(apppath ${MANPATH} ${HOME}/../shared/local/man)
else
    # other
    export PATH=$(prepath ${PATH} ${HOME}/local/bin)
    export LD_LIBRARY_PATH=$(apppath ${LD_LIBRARY_PATH} ${HOME}/local/lib)
    export MANPATH=$(apppath ${MANPATH} ${HOME}/local/share/man)
fi
export MANPATH=$(apppath ${MANPATH} ${HOME}/local/man)
# pip install --user
export PATH=$(prepath ${PATH} ${HOME}/bin)
# homebrew
export PATH=$(apppath ${PATH} /usr/local/sbin)
export PATH=$(apppath ${PATH} /opt/homebrew/sbin)
export INFOPATH=$(prepath ${INFOPATH} /opt/homebrew/share/info)
# mac
export MANPATH=$(apppath ${MANPATH} /usr/share/man)
export MANPATH=$(apppath ${MANPATH} /usr/local/share/man)
export MANPATH=$(prepath ${MANPATH} /opt/homebrew/share/man)

# MANPATH after install_netcdf
export MANPATH=$(apppath ${MANPATH} ${HOME}/bin/man)
export MANPATH=$(apppath ${MANPATH} /usr/local/man)
export MANPATH=$(apppath ${MANPATH} /usr/local/share/man)
export MANPATH=$(apppath ${MANPATH} /usr/local/gfortran/share/man)
ff=$(find /usr/local/ -maxdepth 1 -type d -name hdf-4.\*)
[[ -n "${ff}" ]] && export MANPATH=$(apppath ${MANPATH} ${ff}/man)
ff=$(find /usr/local/ -maxdepth 1 -type d -name netcdf-3.\*)
[[ -n "${ff}" ]] && export MANPATH=$(apppath ${MANPATH} ${ff}/share/man)
# ToDo: only once /usr/local/openmpi-2.0.1-gfortran/share/man/man1
ff=$(find /usr/local/ -maxdepth 1 -type d -name openmpi-.\*)
[[ -n "${ff}" ]] && export MANPATH=$(apppath ${MANPATH} ${ff}/share/man)
export MANPATH=$(apppath ${MANPATH} /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home/man)

# PYTHONPATH
# if [[ -d /usr/local/lib/python2.7/site-packages ]] ; then export PYTHONPATH="${PYTHONPATH}:/usr/local/lib/python2.7/site-packages" ; fi
export PYTHONPATH=$(apppath ${PYTHONPATH} ${HOME}/prog/github/jams_python)
export PYTHONPATH=$(apppath ${PYTHONPATH} ${HOME}/prog/github/hesseflux)
export PYTHONPATH=$(apppath ${PYTHONPATH} ${HOME}/prog/github/pyeee)
export PYTHONPATH=$(apppath ${PYTHONPATH} ${HOME}/prog/python/lib)
# export PYTHONPATH=$(apppath ${PYTHONPATH} ${HOME}/prog/jams/janalyse)

# IDL/GDL
export IDL_STARTUP=${HOME}/bin/idlstartup.pro

#
# Prompt, etc.
#

umask 022
set -o emacs
set -o noclobber
export PS1="\u@\h:\w> "
# default editor
export EDITOR="emacs"
export EMAIL="mc@macu.de"
export HISTCONTROL=ignoredups:ignorespace
export HISTFILESIZE=20000
export HISTSIZE=5000
export LANG="en_AU"
export LC_ALL="en_AU.UTF-8"
export LC_CTYPE="en_AU.UTF-8"
export NAME="Matthias Cuntz"
export PROMPT_DIRTRIM=3

# Backspace
if [[ "${SHELL}" != "/bin/ksh" ]] ; then
    stty erase ^H
    if [[ -z $TERM ]] ; then
        case $(tset -s -Q) in
            con*|vt100) tset -Q -e ^? ;;
        esac
    fi
fi

# Display
if [[ "${DISPLAY=}" == "" ]] ; then
    export DISPLAY=$(ps uxww | awk '$NF ~ /^:[0-9]+$/ {print $NF;}' | head -1)
    [[ -z "${DISPLAY=}" ]] && export DISPLAY=:0
fi

# Aliases
[[ -f ${HOME}/.bashrc ]] && source ~/.bashrc

# command line fuzzy finder
if [[ -f ~/.fzf.bash ]] ; then
    source ~/.fzf.bash
    export FZF_DEFAULT_COMMAND=fd
fi

# bash completion
if [[ -f "/usr/local/etc/profile.d/bash_completion.sh" ]] ; then
    export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"
    source "/usr/local/etc/profile.d/bash_completion.sh"
fi
if [[ -f "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] ; then
    export BASH_COMPLETION_COMPAT_DIR="/opt/homebrew/etc/bash_completion.d"
    source "/opt/homebrew/etc/profile.d/bash_completion.sh"
fi
[[ -f ${HOME}/bin/binCompletions.bash ]] && source ${HOME}/bin/binCompletions.bash
[[ -f ${HOME}/prog/github/ido/ido_bash_complete ]] && source ${HOME}/prog/github/ido/ido_bash_complete
[[ -f ${HOME}/prog/jams/bash/jams_bash_complete ]] && source ${HOME}/prog/jams/bash/jams_bash_complete
[[ -f ${HOME}/prog/jams/utils/jams_utils_complete ]] && source ${HOME}/prog/jams/utils/jams_utils_complete
# [[ -f ${HOME}/prog/jams/utils/cdoCompletions.bash ]] && source ${HOME}/prog/jams/utils/cdoCompletions.bash

# --------------------------------------------------------------------
# Interactive session - machine-specific  settings
#

#
# Current machine/computing system
#

# win/mac/linux
ossystem=$(uname -s | cut -f1-6 | tr '[a-z]' '[A-Z]')
[[ "${ossystem}" == "CYGWIN_NT-5.1" ]] && ossystem=$(uname -s | cut -c1-6 | tr '[a-z]' '[A-Z]')
# mac address of main wifi adapter
ether=$(echo $(ifconfig en0 ether 2>/dev/null | grep -v option | sed -n -e 2p | sed -e '/ether/s/ *ether //'))
# machine's network name
maschine=$(uname -n | tr -d '[0-9]' | tr '[a-z]' '[A-Z]') # w/o number
# OS main revision number
osver=$(uname -r)
osver=${osver%%\.*}
# network domain
domainprog="domainname"
if [[ "$(which $domainprog)" == "" ]] ; then
    if [[ "${ossystem}" == "DARWIN" ]] ; then
        domainprog="hostname"
    else
        domainprog="hostname --domain"
    fi
fi
longdomain=$(${domainprog} | sed -e 's/(none)//' | tr -d '[0-9]' | tr '[a-z]' '[A-Z]')
[[ "${longdomain}" == "" ]] && longdomain=$(hostname --domain 2> /dev/null | sed -e 's/(none)//' | tr -d '[0-9]' | tr '[a-z]' '[A-Z]')
[[ "${longdomain}" == "BGC" ]] && longdomain=$(hostname --domain | tr '[a-z]' '[A-Z]')
[[ "${longdomain}" == "" ]] && longdomain=$(hostname | tr -d '[0-9]' | tr '[a-z]' '[A-Z]')
ndomain=${#longdomain}
if [[ "${SHELL}" == "/bin/ksh" ]] ; then
    nstart=$(( $ndomain - 6 ))
    domain=$(echo ${longdomain} | cut -c${nstart}-${ndomain})
else
    nstart=$(( $ndomain - 7 ))
    domain=${longdomain:$nstart:7}
fi
[[ "${domain}" == "R" ]] && domain='EXPLOR'
[[ "${maschine}" == "FRONTEND" ]] && domain='.UFZ.DE'
[[ "${maschine}" == "AVAKAS-FRONTEND" ]] && domain='MCIA.UNI-BORDEAUX.FR'
[[ "${maschine:0:4}" == "GADI" ]] && maschine='GADI'

#
# OS system version- and machine-specific aliases
#

if [[ "${ossystem}" == "DARWIN" ]] ; then
    osdigit=$(( $osver - 4 ))
    for ((i=9; i<=19; i++)) ; do
        [[ ${osver} -eq ${i} && -f ${HOME}/.bashrc.10.${osdigit} ]] && source ~/.bashrc.10.${osdigit}
    done
    osdigit=$(( $osver - 15 ))
    [[ ${osver} -eq 20 && -f ${HOME}/.bashrc.11.${osdigit} ]] && source ~/.bashrc.11.${osdigit}
    [[ ${osver} -eq 21 && -f ${HOME}/.bashrc.12.0 ]] && source ~/.bashrc.12.0
elif [[ "${ossystem}" == "CYGWIN" ]] ; then
    [[ -f ${HOME}/.bashrc.cygwin ]] && source ${HOME}/.bashrc.cygwin
elif [[ "${ossystem}" == "LINUX" && "${domain}" == "ENA.MPG" ]] ; then
    [[ -f ${HOME}/.bashrc.mpi-bgc ]] && source ${HOME}/.bashrc.mpi-bgc
elif [[ "${ossystem}" == "LINUX" && "${domain}" == "ZMAW.DE" ]] ; then
    [[ -f ${HOME}/.bashrc.zmaw ]] && source ${HOME}/.bashrc.zmaw
elif [[ "${ossystem}" == "LINUX" && "${domain}" == "DKRZ.DE" ]] ; then
    [[ -f ${HOME}/.bashrc.dkrz ]] && source ${HOME}/.bashrc.dkrz
elif [[ "${maschine}" == "TORNADO" ]] ; then
    [[ -f ${HOME}/.bashrc.dkrz ]] && source ${HOME}/.bashrc.dkrz
elif [[ "${maschine}" == "BLIZZARD" ]] ; then
    [[ -f ${HOME}/.bashrc.blizzard ]] && source ${HOME}/.bashrc.blizzard
elif [[ "${maschinen}" == "FRONTEND1" ]] ; then
    [[ -f ${HOME}/.bashrc.eve2 ]] && source ${HOME}/.bashrc.eve2
elif [[ "${maschinen}" == "FRONTEND2" ]] ; then
    [[ -f ${HOME}/.bashrc.eve2 ]] && source ${HOME}/.bashrc.eve2
elif [[ "${maschine}" == "AVAKAS-FRONTEND" ]] ; then
    [[ -f ${HOME}/.bashrc.avakas ]] && source ${HOME}/.bashrc.avakas
elif [[ "${maschine}" == "VM-OQX" ]] ; then
    [[ -f ${HOME}/.bashrc.explor ]] && source ${HOME}/.bashrc.explor
elif [[ "${maschine}" == "RAIJIN" ]] ; then
    [[ -f ${HOME}/.bashrc.raijin ]] && source ${HOME}/.bashrc.raijin
elif [[ "${maschine}" == "GADI" ]] ; then
    [[ -f ${HOME}/.bashrc.gadi ]] && source ${HOME}/.bashrc.gadi
fi

#
# macOS setup
#

# all macOS
if [[ "${ossystem}" == "DARWIN" ]] ; then
    # Licenses@ufz
    [[ "${domain}" == ".UFZ.DE" || "${maschinen}" == "CES241M.LOCAL" ]] && export LM_LICENSE_FILE=27001@license
    export PATH=$(apppath ${PATH} /opt/pkgconfig/bin)
    [[ -d /Applications/itt/idl ]] && export IDL_DIR=/Applications/itt/idl
    [[ -d /Applications/exelis/idl ]] && export IDL_DIR=/Applications/exelis/idl
    export PATH=$(apppath ${PATH} /Library/Frameworks/Python.framework/Versions/2.7/bin)
    export PATH=$(apppath ${PATH} /Library/Frameworks/Python.framework/Versions/3.6/bin)
    export PATH=$(apppath ${PATH} /Library/Frameworks/Python.framework/Versions/3.7/bin)
    export PATH=$(apppath ${PATH} /Library/Frameworks/Python.framework/Versions/3.8/bin)
    export PATH=$(apppath ${PATH} /Library/Frameworks/Python.framework/Versions/3.9/bin)
    if [[ -d /opt/pgi ]] ; then
        export PGI=/opt/pgi
        export MANPATH=$(apppath ${MANPATH} ${PGI}/osx86-64/2019/man)
        export PATH=$(apppath ${PATH} ${PGI}/osx86-64/2019/bin)
    fi
fi

# Special MacBoock Air 2014
if [[ "${ether}" == "??:??:??:??:??:??" ]] ; then
    export NAG_KUSARI_FILE=${HOME}/bin/licences/nag_license.6.1.node-lock.air
fi

# Special MacBoock Pro UFZ 2014
if [[ "${ether}" == "??:??:??:??:??:??" ]] ; then
    export NAG_KUSARI_FILE=${HOME}/bin/licences/nag_license.6.1.node-lock.macbook
fi

# Special MacBoock Pro 13" INRA 2016
if [[ "${ether}" == "??:??:??:??:??:??" ]] ; then
    # export NAG_KUSARI_FILE=${HOME}/bin/licences/nag_license.6.2.full.mcinra
    export NAG_KUSARI_FILE=${HOME}/bin/licences/nag_license.7.0.full.mcinra
    export INTEL_LICENSE_FILE=${HOME}/bin/licences/ifort_licence_2019.lic.mcinra
    export HOMEBREW_NO_ANALYTICS=1
fi

# Special MacBoock Pro 16" INRAE 2020
if [[ "${ether}" == "??:??:??:??:??:??" ]] ; then
    export BASH_SILENCE_DEPRECATION_WARNING=1
    export HOMEBREW_NO_ANALYTICS=1
    export NAG_KUSARI_FILE=${HOME}/bin/licences/nag_license.7.0.full.mc16
fi

#
# Linux setup
#

if [[ "${ossystem}" == "LINUX" ]] ; then
    # Gadi
    if [[ "${maschine}" == "GADI" ]] ; then
        export EDITOR="emacs -nw"
        export LANG=en_AU.UTF-8
        unset SSH_ASKPASS
        # export PATH=$(apppath ${PATH} /g/data/x45/intelpython/bin)
        # export PYTHONPATH=$(prepath ${PYTHONPATH} /g/data/x45/intelpython/lib/python3.7/site-packages)
        export PATH=$(apppath ${PATH} /g/data/x45/python3.10.4/bin)
        export PYTHONPATH=$(prepath ${PYTHONPATH} /g/data/x45/python3.10.4/lib/python3.10/site-packages)
    fi
    # Explor
    if [[ "${maschine}" == "VM-OQX" ]] ; then
        export EDITOR="emacs -nw"
        export LANG=en_AU.UTF-8
        unset SSH_ASKPASS
    fi
    # Bordeaux
    if [[ "${maschine}" == "AVAKAS-FRONTEND" ]] ; then
        module load torque
        export EDITOR="emacs"
        export LANG=en_AU.UTF-8
    fi
    # UFZ
    if [[ "${domain}" == ".UFZ.DE" ]] ; then
        [[ "${maschine}" == "UFZNX" ]] && export EDITOR="emacs -nw" || export EDITOR="nano -w"
        export LANG=en_AU.UTF-8
        unset SSH_ASKPASS
    fi
    # MPI-BGC
    if [[ "${domain}" == "ENA.MPG" ]] ; then
        [[ -z "$PROFILEREAD" ]] && source /etc/profile
        export PRINTER=A_2_005_HP8000
    fi
    # MPI-MET
    if [[ "${domain}" == "ZMAW.DE" ]] ; then
        export PRINTER=g1715-m2
        stty erase ^?
        # # locally compiled ncview
        # export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/sw/sarge-ia32/udunits-1.12.4/lib/"
    fi
    # Migale
    if [[ "${maschine}" == "MIGALE" ]] ; then
        export LANG=en_AU.UTF-8
        unset SSH_ASKPASS
    fi
fi

#
# Unix setup
#

# Special DKRZ - Power6
if [[ "${ossystem}" == "AIX" ]] ; then
    export EDITOR="emacs -nw"
    # python 2.6 (default 2.3)
    [[ "${maschine}" == "BLIZZARD" ]] && module load PYTHON
fi

#
# End
# -----------------------------------------------------------------------------
