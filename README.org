# C-c C-e  for export within Emacs
#+OPTIONS: toc:nil
#+OPTIONS: broken-links:t
#+TITLE: Setting up macOS for software development

Author: Matthias Cuntz, mc (at) macu (dot) de\\
Modified: 06.01.2023

Inspired by guides of [[https://medium.com/faun/zero-to-hero-set-up-your-mac-for-software-development-919ede3df83b][Dirk Avery]], [[https://medium.com/better-programming/setting-up-your-mac-for-web-development-in-2020-659f5588b883][Vinicius De Antoni]], [[https://sourabhbajaj.com/mac-setup/][Sourabh Bajaj]], [[https://github.com/nicolashery/mac-dev-setup][Nicolas Hery]].

This is a reminder for myself how to setup a new Mac or updating the OS, which might be useful for others. The repository includes some of my dot-files as a reference.

* Table of Contents :TOC:
- [[#before-starting][Before starting]]
- [[#bootable-installer-for-macos-on-usb][Bootable installer for macOS on USB]]
- [[#installing-macos-with-the-bootable-installer][Installing macOS with the bootable installer]]
- [[#setup-macos][Setup macOS]]
  - [[#check-for-system-updates][Check for system updates]]
  - [[#xcode][Xcode]]
  - [[#set-preferences-of-macos-and-standard-apps][Set preferences of macOS and standard apps]]
  - [[#set-the-default-shell][Set the default shell]]
  - [[#restore-backup][Restore backup]]
  - [[#app-store][App Store]]
  - [[#xquartz][XQuartz]]
  - [[#homebrew][Homebrew]]
  - [[#set-your-default-shell-2][Set your default shell #2]]
  - [[#emacs][Emacs]]
  - [[#latex][LaTeX]]
  - [[#freeware][Freeware]]
  - [[#myriad-pro][Myriad Pro]]
  - [[#python][Python]]
  - [[#locate][locate]]
  - [[#payware][Payware]]
  - [[#additional-software][Additional software]]
  - [[#netcdf4underfortran-and-openmpi-development-packages][netcdf4\under{}fortran and openmpi development packages]]

* Before starting
  1. You might want to use iCloud for your /Contacts/, /Calendars/, /Reminders/, /Notes/, and /Keychain/. If you had not switched it on, you should do this a couple of hours before installation because it takes some time until things get synchronised. Some logoff/login might also help. You can check all but /Keychain/ on [[https://www.icloud.com][icloud.com]]. You can switch it off again on the updated system after synchronisation finished, if not wanted.

  2. Backup all your files including Documents, Movies, Pictures. Check Desktop as well.

  3. Also store all your dot-files and dot-directories from the =${HOME}= directory such as =.bash_profile=, =.bashrc= and =.ssh=.

  4. You might want to write down your /Computer Name/ from /System Preferences/ > /Sharing/.

  5. You might also like to write down your username, typing in the terminal:

     #+BEGIN_SRC bash
       whoami
     #+END_SRC

  6. A list of your installed programs in /Applications/ might come in handy.


* Bootable installer for macOS on USB
  From [[https://support.apple.com/en-us/HT201372][support.apple.com]]:
  1. Download a macOS installer such as macOS Monterey from the App Store. When the macOS installer opens, quit it without continuing installation.

     The installer should have a size of about 12 GB. Based on your Mac, only a much smaller app might have been downloaded, which would later download the actual files during installation. This does not allow to create a bootable thumb drive. Try to get the full installer for example from the Apple Developer site.

  1. Format a USB flash drive of at least 16 GB storage as /Mac OS Extended/ with name InstallMonterey, for example.

  1. In Terminal type:

     #+BEGIN_SRC bash
       sudo /Applications/Install\ macOS\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/InstallMonterey --nointeraction
     #+END_SRC


* Installing macOS with the bootable installer
  Also from [[https://support.apple.com/en-us/HT201372][support.apple.com]]:
  1. Startup is different if you have a Mac with Apple silicon chips or Intel processors.
     a) Intel processor
        - Connect USB drive, restart while holding Option (alt) key until you see the bootable volumes.

        - Select the volume containing the bootable installer, i.e. /Install macOS Monterey/, and press Return. 

     a) Apple silicon
        - Shut down.

        - Turn on Mac and continue to hold the power button until you see the startup options window, which shows your bootable volumes.

        - Select the volume containing the bootable installer, i.e. /Install macOS Monterey/, and click Continue.

  1. Select /Disk Utility/. Choose the /Internal/ disk, e.g. /Macintosh HD/. /Erase/ it using the /Format/ APFS. Use the button /Erase Volume Group/ instead of /Erase/ if available; otherwise use /Erase/.

  1. Select any other internal volumes in the sidebar, then click the delete volume (–) button in the toolbar to delete that volume. Disregard any internal volume named Macintosh HD or Macintosh HD – Data, as well as any volumes in the External and Disk Images sections of the sidebar.

     Then quit /Disk Utility/.

  1. Select /Install macOS Monterey/ and follow the on-screen steps.


* Setup macOS
  The steps are intented to be done (roughly) in order.

** Check for system updates
   Check for updates of macOS in /System Preferences/ > /Software Update/.

** Xcode
   A full Xcode installation is not always needed. Most often, the Xcode Command Line Tools (CLT) are enough, for example for Homebrew. But some development software needs a full Xcode installation such as the FreePGI Fortran Compiler. So one can, for example, install the Xcode CLT only, and install the full Xcode only if another program demands it. Note that installing the full XCode takes considerable time.

   Install XCode Command Line Tools (CLT) from the terminal:

   #+BEGIN_SRC bash
     xcode-select --install
   #+END_SRC

   This did not work for me sometimes, telling that it cannot reach the server. Downloading the installer package from the [[https://developer.apple.com/download/more/?=command%20line%20tools][Apple Developer website]] (you have to login with your Apple ID) worked but led to problems with installing Python later. Then I just install the full Xcode package.

   The full Xcode can be installed from the App Store. You have to open it once and confirm the Usage Agreement in order to use the bundled tools. Be sure to have completed this step before starting with [[#homebrew][Homebrew]].

   While waiting for XCode or the Xcode CLT to install, you can download and install the other apps from [[#app-store][App Store]], [[#xquartz][XQuartz]] and some [[#freeware][Freeware]] except [[http://www.chachatelier.fr/latexit/][LaTeXiT]] and [[https://www.sourcetreeapp.com][SourceTree]]. You can also [[#set-preferences-of-macos-and-standard-apps][Set preferences of macOS and standard apps]].

** Set preferences of macOS and standard apps
   Set /System Preferences/ such as:
   - /Sharing/ > /Computer Name/,

   - unsetting  all tickboxes in /Mission Control/,

   - set /Keyboard/ > /Modifier Keys.../ > /Caps Lock Key/ to /No Action/

   Set preferences in standard macOS apps such as:
   - Terminal
     + set /Profiles/ > /Shell/ > /When the shell exists:/ to /Close if the shell exited cleanly/

     + unset tickbox /Profiles/ > /Advanced/ > /Set locale environment variables on startup/

   - Finder
     + set tickbox /Advanced/ > /Show all filename extensions/

** Set the default shell
   Apple is now using /zsh/ as its default shell. If you want to stay with /bash/, change it in the terminal:

   #+BEGIN_SRC bash
     chsh -s /bin/bash
   #+END_SRC

   To get rid of the nagging reminder that the default shell is now zsh every time you open a new terminal window, set in your =.bash_profile=:

   #+BEGIN_SRC bash
     export BASH_SILENCE_DEPRECATION_WARNING=1
   #+END_SRC

** Restore backup
   Transfer files from your backup media either directly or using a Time Machine backup.

** App Store
   Check your account in the App Store. There are bundled apps such as Keynote, Numbers, etc., which you should open once to get over the welcome screens and offered tutorials.

   It also shows you a list of previously installed apps on other systems. Install what you still want and open it once.

   My essential apps from the App Store are:\\
   Keynote/Pages/Numbers, The Unarchiver, WordService, HiddenMe, Slack, Microsoft Remote Desktop.

** XQuartz
   XQuartz is the X-window system running on macOS, needed for \ast{}nix GUI programs. Get it from [[http://xquartz.macosforge.org/][XQuartz]].

** Homebrew
   Install [[http://brew.sh][Homebrew]] for easy \ast{}nix package installation.

   #+BEGIN_SRC bash
     /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
   #+END_SRC

   This installs Homebrew into =/usr/local= on mac OS X Intel and into =/opt/homebrew= on macOS Apple Silicon (M1).
   
   You might want to put into your =.bash_profile= for mac OS X Intel:

   #+BEGIN_SRC bash
     [[ -x $(which brew) ]] && eval $(brew shellenv)
   #+END_SRC

   and for macOS Apple Silicon (M1):

   #+BEGIN_SRC bash
     [[ -d /opt/homebrew ]] && eval $(/opt/homebrew/bin/brew shellenv)
   #+END_SRC

   so that Homebrew can be found. This sets, for example, the environment variables =HOMEBREW_PREFIX=, =HOMEBREW_CELLAR=, and =HOMEBREW_REPOSITORY= and prepends the =$PATH= with Homebrew's bin directory. Sometimes I set this manually if I want to have Homebrew's bin directory at the end rather than at the beginning of the system =$PATH= such as:

   #+BEGIN_SRC bash
     if [[ -d /opt/homebrew ]] ; then
         # eval $(/opt/homebrew/bin/brew shellenv)
         # or by hand to append rather than prepand path
         export HOMEBREW_PREFIX="/opt/homebrew";
         export HOMEBREW_CELLAR="/opt/homebrew/Cellar";
         export HOMEBREW_REPOSITORY="/opt/homebrew";
         export PATH=${PATH}:/opt/homebrew/bin
     elif [[ -e /usr/local/bin/brew ]] ; then
         export HOMEBREW_PREFIX="/usr/local";
         export HOMEBREW_CELLAR="/usr/local/Cellar";
         export HOMEBREW_REPOSITORY="/usr/local";
         export PATH=${PATH}:/usr/local/bin
     fi
   #+END_SRC
 
   - *GNU compiler and netCDF software*

     The gcc suite includes /gfortran/. Install the netcdf-C version, which comes with /ncdump/, etc., install /nco/, /ncview/, and /Panoply/. One can also install /cdo/ with Homebrew, or use the script [[https://github.com/mcuntz/install_netcdf][install\under{}netcdf]] because /cdo/ is quite a bit faster when compiled with the Intel compiler and not with the GNU compiler.

     #+BEGIN_SRC bash
       for i in ghostscript gcc netcdf cmake udunits proj jasper gsl ; do \
           brew install ${i} ; done
       for i in antlr@2 geos gdal nco ncview ; do brew install ${i} ; done
       brew install --cask temurin
       brew install --cask panoply
       brew install cdo
     #+END_SRC

     /HDF5/ from Homebrew is not thread-safe so /cdo/ will need the -L flag if piping, i.e. more than one operator is given to /cdo/ in one call such as =cdo -timmean -selvar,Tair infile outfile=. I use in my =.bashrc=:

     #+BEGIN_SRC bash
       alias cdo="cdo -L"
     #+END_SRC

     Note that =cdo -L= instead of purely =cdo= must also be used in scripts for piping.

     I install /Panoply/ with Homebrew for easy updating:

     #+BEGIN_SRC bash
       brew install --cask panoply
     #+END_SRC

     No matter how /panoply/ gets installed, it often fails on Apple Silicon (M1) asking to install Java 9. Installing the [[https://www.azul.com/downloads/?package=jdk][Azul Zulu JDK]] solved it for me, as for many other users.

   - *Install more practical software*

     Some more practical software such as /wget/ for retrieval of files from web servers, /imagemagick/ for image manipulation, /ffmpeg/ for movies, /htop/ for an extended top, /pandoc/ to convert between markup languages, /fd/ for a faster find, /ripgrep/ for grepping across a directory tree, the statistical computing environment /R/, the version control system /subversion/, and the command-line fuzzy finder /fzf/:

     #+BEGIN_SRC bash
       for i in wget imagemagick ffmpeg enscript htop graphviz pkg-config \
            pandoc doxygen tree git fd bat ripgrep r subversion ; do \
            brew install ${i} ; done
       brew install fzf
       ${HOMEBREW_PREFIX}/opt/fzf/install
     #+END_SRC

** Set your default shell #2
   Apple moved to /zsh/ because of the license change of /bash/ from GPLv2 to GPLv3 with its version 4.0. The current bash shell on macOS is hence 3.2 from 2007. If you want to use the latest version of /bash/, install it with Homebrew, "whitelist" the new shell as a login shell, and choose it as your default login shell:

   #+BEGIN_SRC bash
     brew install bash
     # add the following line to /etc/shells
     # /usr/local/bin/bash
     # or
     # /opt/homebrew/bin/bash
     sudo nano /etc/shells
     chsh -s ${HOMEBREW_PREFIX}/bin/bash
   #+END_SRC

   Note that your shell scripts will probably still use the Apple default bash shell because they often have the shebang line =#!/bin/bash=. The most portable way to write scripts is to use =#!/usr/bin/env bash= as your shebang. This will take the first /bash/ in your =$PATH=, which would now be =/usr/local/bin/bash= or =/opt/homebrew/bin/bash=.

   You can now use /bash-completion/ with the new bash shell.

   #+BEGIN_SRC bash
     brew install bash-completion@2
   #+END_SRC

   You then have to put the following lines in your =.bash_profile= to use bash-completion:

   #+BEGIN_SRC bash
     if [[ -f "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]] ; then
         export BASH_COMPLETION_COMPAT_DIR="${HOMEBREW_PREFIX}/etc/bash_completion.d"
         source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
     fi
   #+END_SRC

   Note that these lines have to be after the sourcing of =.fzf.bash= in your =.bash_profile= if you installed /fzf/, otherwise you get an error such as =programmable_completion: source: possible retry loop=.

   You can do the exact same steps for the zsh shell. Apples version of /zsh/ is rather new but if you want to have the newest developments, install /zsh/ with Homebrew, whitelist it and use it as your default shell. If you use /zsh/, you might want to check out [[https://ohmyz.sh][Oh My ZSH]] for easy configuration of /zsh/.

   After a system update such as from /System Preferences/ > /Software Update/, there might be a link =Relocated Items/= on your Desktop pointing to =/Users/Shared/Relocated Items=. This is a copy of the changed =/etc/shells=. As long as Apple does not modify =/etc/shells= during an update, the edited version stays untouched, though. One can safely delete the link on the Desktop and also the directory under =/Users/Shared=. It does not hurt to do a =cat /etc/shells= in the terminal before, checking that your edits are still there.

** Emacs
   I used to use [[http://aquamacs.org][Aquamacs]], but use [[https://www.spacemacs.org][Spacemacs]] now. The latter is very fast, but has a steep learning curve. At the moment I am not using the two most praised modes: helm and evil. I also needed quite some configuration in the =dotspacemacs/user-config= section of .spacemacs.

   To install Spacemacs:

   #+BEGIN_SRC bash
     brew install --cask emacs
   #+END_SRC

   And if you changed from another Emacs:

   #+BEGIN_SRC bash
     cd ${HOME}
     if [[ -f .emacs ]] ; then mv .emacs .emacs.bak ; fi
     if [[ -d .emacs.d ]] ; then mv .emacs.d .emacs.d.bak ; fi
     git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
   #+END_SRC

   I also installed the font [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]]:

   #+BEGIN_SRC bash
     brew tap homebrew/cask-fonts
     brew install --cask homebrew/cask-fonts/font-source-code-pro
   #+END_SRC

   I immediately installed aspell for spell checking within Spacemacs.

   #+BEGIN_SRC bash
     brew install aspell
   #+END_SRC

   Spacemacs could not access external disks on my systems (Catalina 10.15.7, Big Sur 11.5.1, Monterey 12.0.1) because it did not have the right permissions. I had to give /Full Disk Access/ to =/usr/bin/ruby= following [[https://emacs.stackexchange.com/questions/53026/how-to-restore-file-system-access-in-macos-catalina/53037#53037][this]]: Open /System Preferences/ -> /Security & Privacy/ -> /Privacy/, select /Full Disk Access/ in the left pane, then click + and add =/usr/bin/ruby= to resolve the issue. =/usr= is hidden by default on macOS but you can toggle visibility in /Finder/ by using =Shift+Command+Period=, i.e. =Shift+Command+.=

** LaTeX
   One can download LaTeX from [[https://tug.org/mactex/][MacTeX]] or use a Homebrew cask. I have chosen Homebrew's cask this time because I use the BasicTeX installation and I hope that Homebrew will handle the update between years, which is always a hassle otherwise; but I do not know yet if Homebrew will handle it. The full MacTex installation including all GUIs, Apps, and Programs is:

   #+BEGIN_SRC bash
     brew install --cask mactex
   #+END_SRC

   The minimal LaTeX installation is:

   #+BEGIN_SRC bash
     brew install --cask basictex
   #+END_SRC

   If you chose BasicTeX, then some common LaTeX packages can be installed with:

   #+BEGIN_SRC bash
     sudo tlmgr update --self ; \
     for i in \
         wasysym german titlesec wasy elsarticle \
         supertabular lineno helvetic textpos multirow subfigure appendix \
         lipsum dinbrief a0poster wallpaper collection-fontsrecommended \
         dvipng kastrup boondox newtx type1cm ucs dvipng a0poster floatflt \
         enumitem lastpage hyphenat footmisc simplekv chemfig units \
         ntheorem algorithms cleveref a4wide lettrine mdframed \
         needspace preprint xifthen ifmtarg algorithmicx changepage \
         sidecap sttools marginnote draftwatermark everypage fontinst \
         fltpoint tabfigures mnsymbol mdsymbol collection-fontutils \
         fontaxes was pdfcrop latexmk fncychap tabulary varwidth \
         framed capt-of makecell xstring moreverb wrapfig \
         adjustbox collectbox threeparttable capt-of pgf simplekv \
         cmbright tcolorbox environ titling gensymb program breakurl \
         ncctools vruler apacite \
         ; do sudo tlmgr install ${i} ; done
   #+END_SRC

** Freeware
   Some essential Freeware for me:
   - [[http://www.freemacsoft.net/appcleaner/][AppCleaner]], for removing apps and all their traces,

   - [[https://acrobat.adobe.com/us/en/acrobat/pdf-reader.html][Adobe Reader]], because Preview has problems with some PDFs,

   - [[https://www.mozilla.org/en-US/firefox/all/][Firefox Developer Edition]], Safari is not always supported. [[https://www.google.com/chrome/][Chrome]] is probably the most supported browser. I sometimes also use [[https://www.opera.com][Opera]],

   - [[http://www.chachatelier.fr/latexit/][LaTeXiT]], exporting LaTeX equations as graphics,

   - [[https://rectangleapp.com][Rectangle]], moving windows with keystrokes,

   - [[https://www.zotero.org][Zotero]], reference manager,

   - [[http://www.skype.com/en/][Skype]], video calls,

   - [[https://www.sourcetreeapp.com][SourceTree]], git GUI originally for bitbucket but works with other git repositories as well,

   - [[https://www.spotify.com/][Spotify]], streaming music,

   - [[http://www.videolan.org/vlc/][VLC]], video player for all formats,

   - [[https://github.com/markummitchell/engauge-digitizer][Engauge Digitizer]], recover data points from graphs.

** Myriad Pro
   I like the Myriad Pro font and AGU journals currently use it. The Myriad Pro font comes with the Adobe Acrobat Reader.

   To install for non-LaTeX programs, one can install in Font Book the four /otf/-files from the directory '/Applications/Adobe Acrobat Reader DC.app/Contents/Resources/Resource/Font'.

   An extended set of glyphs are given in the zip file 'MyriadPro.zip':\\
   unzip MyriadPro.zip and drag the folder with the .otf files into Font Book.

   To install Myriad Pro for LaTeX, using the Adobe fonts, one can launch the following commands in terminal:

   #+BEGIN_SRC bash
     for i in fontinst fltpoint tabfigures mnsymbol mdsymbol \
         collection-fontutils ; do \
         sudo tlmgr install ${i} ; done
     git clone https://github.com/sebschub/FontPro.git
     cd FontPro
     mkdir otf
     FONT=MyriadPro
     cp "/Applications/Adobe Acrobat Reader.app/Contents/Resources/Resource/Font/"${FONT}*.otf otf/
     ./scripts/makeall ${FONT}
     echo y | sudo ./scripts/install
     sudo updmap-sys --enable Map=${FONT}.map
     sudo -H mktexlsr
     kpsewhich ${FONT}.map
     cd ..
     \rm -fr FontPro
   #+END_SRC

** Python

   macOS Catalina (10.15) still comes with Python version 2.7.16 as its default version. Official support for Python 2 has ended Januar 2020. So you want to install Python 3. Form macOS Big Sur (11.5), it comes with Python 3. But I still recommend to install Python with /pyenv/ and /pyenv-virtualenv/.

   Installation of Python versions can be a real mess at times, as noted by [[https://xkcd.com/1987/][XKCD]]:

   #+ATTR_HTML: :alt Python path on my system :align center :width 300 :height 300
   [[https://imgs.xkcd.com/comics/python_environment.png]]

   So I am using /pyenv/ and /pyenv-virtualenv/ now. See the great article [[https://medium.com/faun/pyenv-multi-version-python-development-on-mac-578736fb91aa][pyenv: Multi-version Python development on Mac]] by Dirk Avery.

   To install pyenv with Homebrew:

   #+BEGIN_SRC bash
     brew install openssl readline sqlite3 xz zlib
     brew install pyenv
   #+END_SRC

   You have to set the following in your =.bash_profile= so that the shell always finds the currently chosen Python version as first entry.

   #+BEGIN_SRC bash
     export PYENV_ROOT="${HOME}/.pyenv"
     export PATH=${PYENV_ROOT}/shims:${PATH}
     if command -v pyenv 1>/dev/null 2>&1 ; then eval "$(pyenv init -)" ; fi
   #+END_SRC

   Note that the =$PATH= environment must be prepended with =${PYENV_ROOT}/shims= and not =${PYENV_ROOT}/bin= as given in the user guide. Also, this has to be after the addition of Homebrew to the system =$PATH= so that the pyenv installation can be found first.

   - *pyenv 101*

     After starting a new shell, for example by doing =exec ${SHELL}=, you can start installing and using different Python versions:

     #+BEGIN_SRC bash
       pyenv install --list
       pyenv install 3.9.9
       pyenv rehash
       pyenv global 3.9.9
     #+END_SRC

     Remember that you always have to /rehash/ after you installed a new version.

     Try to rehash first if a problem occurs with /pyenv/. For example, some new Homebrew packages might upgrade /pyenv/ as well. Then you get an error such as

     #+BEGIN_SRC bash
       /Users/cuntz/.pyenv/shims/python: line 21:
       /usr/local/Cellar/pyenv/1.2.19/libexec/pyenv:
       No such file or directory
     #+END_SRC

     =pyenv rehash= resolves the issue.

     Note that I actually install Python versions currently as follows:

     #+BEGIN_SRC bash
       brew install tcl-tk
       env PYTHON_CONFIGURE_OPTS="--with-tcltk-includes='-I${HOMEBREW_PREFIX}/opt/tcl-tk/include' \
           --with-tcltk-libs='-L${HOMEBREW_PREFIX}/opt/tcl-tk/lib -ltcl8.6 -ltk8.6' \
           --enable-framework" \
           CFLAGS="-I$(brew --prefix xz)/include" LDFLAGS="-L$(brew --prefix xz)/lib" \
           PKG_CONFIG_PATH="$(brew --prefix xz)/lib/pkgconfig" \
           pyenv install 3.9.9
       pyenv rehash
     #+END_SRC

     Python has to be a framework (=--enable-framework=) if /wxPython/ is used (see the [[https://github.com/pyenv/pyenv/wiki][pyenv wiki]] for details). It is possible that a Python version installed with /pyenv/ clashes with Apple's Tcl/Tk library if one wants to use the /tkinter/ module. This gives in the best case a deprecation warning like:

     #+BEGIN_SRC bash
       DEPRECATION WARNING: The system version of Tk is deprecated and
       may be removed in a future release. Please don't rely on it.
       Set TK_SILENCE_DEPRECATION=1 to suppress this warning.
     #+END_SRC

     So I install /tcl-tk/ from Homebrew first and then (re-)install Python giving the path of the Homebrew Tcl/Tk library. Note that /tcl-tk/ is keg-only in Homebrew. =env= in the command above allows using the Homebrew version with Python while not interfering with the macOS provided Tcl/Tk installation.

   - *pyenv-virtualenv*

     You can use virtual environments with /pyenv/:

     #+BEGIN_SRC bash
       brew install pyenv-virtualenv
     #+END_SRC

     You have to put the following in your =.bash_profile=:

     #+BEGIN_SRC bash
       if which pyenv-virtualenv-init > /dev/null ; then eval "$(pyenv virtualenv-init -)"; fi
     #+END_SRC

     Virtual environments can then be created as:

     #+BEGIN_SRC bash
       pyenv virtualenv 3.9.9 testproject
     #+END_SRC

     The virtual environment /testproject/ can then be used just as any installed Python version with /pyenv/. For example:
     #+BEGIN_SRC bash
       pyenv local testproject
       pyenv rehash
     #+END_SRC

   - *pyenv and anaconda*

     /pyenv/ provides also /anaconda/ and /miniconda/, with which you can use conda environments:

     #+BEGIN_SRC bash
       pyenv install miniconda3-4.7.12
       pyenv rehash
       pyenv global miniconda3-4.7.12
       pyenv virtualenv testproject
     #+END_SRC

     You can then install (conda and pip) packages in the testproject:

     #+BEGIN_SRC bash
       conda install numpy scipy matplotlib
     #+END_SRC

     To return to the default Python version:

     #+BEGIN_SRC bash
       conda deactivate
       pyenv global 3.9.9
     #+END_SRC

     If git tells /gettext not found/ after installing anaconda/miniconda, see [[https://github.com/nicolashery/mac-dev-setup][Nicolas Hery]].

   - *Essential Python packages*

     Anaconda comes with hundreds of packages. I tend to use either an official Python version or miniconda and install my essential packages with /pip/ or /conda/. These are currently in my main environment:\\
     numpy, scipy, matplotlib, cartopy, basemap, ipython, jupyter, pandas, netcdf4, statsmodels, scikit-learn, xlrd, openpyxl, mpi4py, schwimmbad, tqdm, xarray, numexpr, bottleneck, wxpython, sphinx, numpydoc, pytest, pytest-cov, flake8, gdal, f90nml, bs4, pykdtree, cython, pyshp, six, wheel

     and mostly this subset in other virtual environments:\\
     numpy, scipy, matplotlib, ipython, pandas, netcdf4, xlrd, openpyxl, flake8, wheel

     You would have to source your =.bash_profile= again if you install with /pip/ or /conda/ just after installing /pyenv/.

     There is currently a problem with Apple's Accelerate framework on Apple Silicon (M1) so that one should use /OpenBLAS/. You also need to tell /pip/ where to find the HDF5 library or the GEOS library and the like. You do not need the lines with =OPENBLAS= and =HDF5-DIR= if you are on macOS on Intel and homebrew installs into =/usr/local=; this directory is searched automatically.
 
     #+BEGIN_SRC bash
       # essential subset
       if [[ "$(uname -m)" == "arm64" ]] ; then
           export OPENBLAS="$(brew --prefix openblas)"
           export HDF5_DIR="$(brew --prefix hdf5)"
           export GEOS_DIR="$(brew --prefix geos)"
           export GEOS_CONFIG="$(brew --prefix geos)/bin/geos-config"
       fi
       pyenv virtualenv 3.9.9 pystd
       pyenv rehash
       pyenv global pystd
       pip install numpy
       for i in wheel scipy matplotlib ipython pandas netcdf4 \
           xlrd flake8 ; do \
           pip install ${i} ; done
       # other standard packages
       for i in jupyter statsmodels scikit-learn schwimmbad \
           tqdm xarray numexpr bottleneck sphinx \
           numpydoc pytest pytest-cov f90nml bs4 pykdtree cython pyshp six \
           openpyxl ; do \
           pip install ${i} ; done
       CXXFLAGS="-I${HOMEBREW_PREFIX}/include" pip install wxpython
       # shapely needs to be built from source to link to geos.
       # Uninstall it if already installed
       [[ -z $(pip freeze | grep shapely) ]] && pip uninstall -y shapely
       pip install shapely --no-binary shapely
       if [[ "$(uname -m)" != "arm64" ]] ; then
           # install basemap directly from github
           # -> does not work on Apple Silicon (M1), neither with clang nor with gcc@11
           pip install https://github.com/matplotlib/basemap/archive/master.zip
       fi
       # gdal needs to know the installed gdal version
       pip install GDAL==$(gdal-config --version) \
           --global-option=build_ext --global-option="-I${HOMEBREW_PREFIX}/include"
       # mpi4py will be installed after installing openmpi later
       pip install cartopy
     #+END_SRC

     Replace /pip/ with /conda/ if using conda environments. There is also a conda package for basemap.

** locate
   Create locate database so that you can search files with the locate command:

   #+BEGIN_SRC bash
     sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
   #+END_SRC

** Payware
   Install Payware, which is for me:
   - Microsoft Office,

   - [[https://www.antidote.info/en][Antidote]], spell and grammar checker for English and French,

   - [[http://www.nag.co.uk/downloads/npdownloads.asp][NAG compiler]], very meticulous Fortran compiler,

   - [[https://software.intel.com/en-us/parallel-studio-xe][Intel compiler]], C/C++/Fortran compiler producing very fast code,

   - [[https://www.cyberghostvpn.com/][CyberGhost]], VPN client,

   - [[https://www.harrisgeospatial.com/Software-Technology/IDL][IDL]], interactive data language.

** Additional software
   Install additional software from you institution or similar such as VPN clients, cloud services, etc. For INRAE this is: Kaspersky Antivirus, GlobalProtect VPN, StorageMadeEasy.

** netcdf4\under{}fortran and openmpi development packages
   Use the script [[https://github.com/mcuntz/install_netcdf][install\under{}netcdf]] to install netcdf4\under{}fortran and openmpi development packages for different Fortran compilers. The script is well documented and we just describe the general steps.

   - Look for the latest versions (numbers) of netcdf4\under{}fortran and openmpi (addresses are given at the beginning of the script install\under{}netcdf) and set them below /donetcdf4\under{}fortran/ and /doopenmpi/.

   - Set both /donetcdf4\under{}fortran/ and /doopenmpi/ to 1.

   - Check that ~prefix=/usr/local~.

   - Set Fortran compiler, e.g. ~fortran_compilers="gfortran"~.

   - For Intel, you need to source the compiler setup script such as:

   #+BEGIN_SRC bash
     source /opt/intel/bin/compilervars.sh intel64
   #+END_SRC

   - For PGI, you also have to set the ~pgipath~.

   After having installed /openmpi/, one can also install /mpi4py/ in Python, for example:

   #+BEGIN_SRC bash
     env MPICC=/usr/local/openmpi-4.1.2-gfortran/bin/mpicc pip install mpi4py
   #+END_SRC

# ** cdo
#    /HDF5/ from Homebrew is not thread-safe so /cdo/ will need the -L flag if piping.

   #+BEGIN_SRC bash
     alias cdo="cdo -L"
   #+END_SRC

   # Also Apple's /clang/ compiler is not yet OpenMP-enabled so that /cdo/ will not use OpenMP. /cdo/ is running also much faster when compiled with Intel.

   # *ToDo*

   # So I install cdo using the [[https://github.com/mcuntz/install_netcdf][install\under{}netcdf]] script. One will need to add OpenMP to the CFLAGS: ~CFLAGS=-fopenmp~ (-fopenmp for gfortran and ifort, -openmp for nagfor and pgfortran, -qopenmp for others).
